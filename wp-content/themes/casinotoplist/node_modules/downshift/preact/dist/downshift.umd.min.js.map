{"version":3,"file":"downshift.umd.min.js","sources":["../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/react-is/index.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../src/downshift.js","../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../../src/hooks/utils.js","../../src/hooks/useSelect/utils.js","../../src/hooks/useSelect/stateChangeTypes.js","../../src/hooks/useSelect/reducer.js","../../src/hooks/useSelect/index.js","../../src/hooks/useCombobox/utils.js","../../src/hooks/useCombobox/stateChangeTypes.js","../../src/hooks/useCombobox/reducer.js","../../src/hooks/useCombobox/index.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/** @license React v16.9.0\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:!0});\nvar b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?Symbol.for(\"react.suspense_list\"):\n60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.fundamental\"):60117,w=b?Symbol.for(\"react.responder\"):60118;function x(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case t:case r:case d:return u}}}function y(a){return x(a)===m}exports.typeOf=x;exports.AsyncMode=l;\nexports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w)};exports.isAsyncMode=function(a){return y(a)||x(a)===l};exports.isConcurrentMode=y;exports.isContextConsumer=function(a){return x(a)===k};exports.isContextProvider=function(a){return x(a)===h};\nexports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return x(a)===n};exports.isFragment=function(a){return x(a)===e};exports.isLazy=function(a){return x(a)===t};exports.isMemo=function(a){return x(a)===r};exports.isPortal=function(a){return x(a)===d};exports.isProfiler=function(a){return x(a)===g};exports.isStrictMode=function(a){return x(a)===f};exports.isSuspense=function(a){return x(a)===p};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","function isElement(el) {\n  return el != null && typeof el === 'object' && el.nodeType === 1;\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\nfunction handleRefs(...refs) {\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({\n  isOpen,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    return selectedItem ? itemToString(selectedItem) : ''\n  }\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact or preact X\n    return (\n      typeof element.nodeName === 'string' || typeof element.type === 'string'\n    )\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.attributes || element.props\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key]\n\n    return prevState\n  }, {})\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular = true,\n) {\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n\n  let newIndex = baseIndex + moveAmount\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex\n  }\n\n  const nonDisabledNewIndex = getNextNonDisabledIndex(\n    moveAmount,\n    newIndex,\n    itemCount,\n    getItemNodeFromIndex,\n    circular,\n  )\n\n  return nonDisabledNewIndex === -1 ? baseIndex : nonDisabledNewIndex\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular,\n) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex)\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex\n  }\n\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0\n      ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false)\n      : getNextNonDisabledIndex(\n          -1,\n          itemCount - 1,\n          itemCount,\n          getItemNodeFromIndex,\n          false,\n        )\n  }\n\n  return -1\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement} rootNode The element with combobox role.\n * @param {HTMLElement} menuNode The elements list with listbox role.\n * @param {Document} document The document.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(\n  target,\n  rootNode,\n  menuNode,\n  document,\n  checkActiveElement = true,\n) {\n  return [rootNode, menuNode].some(\n    contextNode =>\n      contextNode &&\n      (isOrContainsNode(contextNode, target) ||\n        (checkActiveElement &&\n          isOrContainsNode(contextNode, document.activeElement))),\n  )\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  targetWithinDownshift,\n  getState,\n  isControlledProp,\n}\n","import {debounce} from './utils'\n\nconst cleanupStatus = debounce(() => {\n  getStatusDiv().textContent = ''\n}, 500)\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp)\n  if (!status) {\n    return\n  }\n\n  div.textContent = status\n  cleanupStatus()\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp = document) {\n  let statusDiv = documentProp.getElementById('a11y-status-message')\n  if (statusDiv) {\n    return statusDiv\n  }\n\n  statusDiv = documentProp.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  documentProp.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport {Component, cloneElement} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  handleRefs,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  targetWithinDownshift,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  getState,\n  isControlledProp,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return getState(stateToMerge, this.props)\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    const {highlightedIndex} = this.getState()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        highlightedIndex,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!isControlledProp(this.props, key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ref, ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: handleRefs(ref, this.rootRef),\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowDown,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                -1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowUp,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        selectedItem: null,\n        inputValue: '',\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting downwards from 0 if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        1,\n        0,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting upwards from last index if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        -1,\n        itemCount - 1,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(onChangeText, onInput, text =>\n          this.inputHandleChange({nativeEvent: {text}}),\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        this._rootNode &&\n        this._rootNode.contains(this.props.environment.document.activeElement)\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: handleRefs(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status, this.props.environment.document)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          this._rootNode,\n          this._menuNode,\n          this.props.environment.document,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          this._rootNode,\n          this._menuNode,\n          this.props.environment.document,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      const {environment} = this.props\n\n      environment.addEventListener('mousedown', onMouseDown)\n      environment.addEventListener('mouseup', onMouseUp)\n      environment.addEventListener('touchstart', onTouchStart)\n      environment.addEventListener('touchmove', onTouchMove)\n      environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        environment.removeEventListener('mousedown', onMouseDown)\n        environment.removeEventListener('mouseup', onMouseUp)\n        environment.removeEventListener('touchstart', onTouchStart)\n        environment.removeEventListener('touchmove', onTouchMove)\n        environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      isControlledProp(this.props, 'selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return cloneElement(element, this.getRootProps(getElementProps(element)))\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n\nfunction validateControlledUnchanged(prevProps, nextProps) {\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n  ;['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(\n    propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    },\n  )\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","import PropTypes from 'prop-types'\nimport {useState, useEffect, useCallback, useReducer} from 'react'\nimport {scrollIntoView, getNextWrappingIndex, getState} from '../utils'\n\nconst defaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n}\n\nfunction getElementIds(\n  generateDefaultId,\n  {id, labelId, menuId, getItemId, toggleButtonId} = {},\n) {\n  const uniqueId = id === undefined ? `downshift-${generateDefaultId()}` : id\n\n  return {\n    labelId: labelId || `${uniqueId}-label`,\n    menuId: menuId || `${uniqueId}-menu`,\n    getItemId: getItemId || (index => `${uniqueId}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${uniqueId}-toggle-button`,\n  }\n}\n\nfunction getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index\n  }\n  if (items.length === 0) {\n    return -1\n  }\n  return items.indexOf(item)\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : ''\n}\n\nfunction getPropTypesValidator(caller, propTypes) {\n  // istanbul ignore next\n  return function validate(options = {}) {\n    Object.entries(propTypes).forEach(([key]) => {\n      PropTypes.checkPropTypes(propTypes, options, key, caller.name)\n    })\n  }\n}\n\nfunction isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key)\n}\n\nfunction capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`\n}\n\nfunction invokeOnChangeHandler(propKey, props, state, changes) {\n  const handler = `on${capitalizeString(propKey)}Change`\n  if (\n    props[handler] &&\n    changes[propKey] !== undefined &&\n    changes[propKey] !== state[propKey]\n  ) {\n    props[handler](changes)\n  }\n}\n\nfunction callOnChangeProps(props, state, changes) {\n  Object.keys(state).forEach(stateKey => {\n    invokeOnChangeHandler(stateKey, props, state, changes)\n  })\n\n  if (props.onStateChange && changes !== undefined) {\n    props.onStateChange(changes)\n  }\n}\n\nfunction useEnhancedReducer(reducer, initialState, props) {\n  const enhancedReducer = useCallback(\n    (state, action) => {\n      state = getState(state, action.props)\n\n      const {stateReducer: stateReduceLocal} = action.props\n      const changes = reducer(state, action)\n      const newState = stateReduceLocal(state, {...action, changes})\n\n      callOnChangeProps(action.props, state, newState)\n\n      return newState\n    },\n    [reducer],\n  )\n\n  const [state, dispatch] = useReducer(enhancedReducer, initialState)\n\n  return [getState(state, props), dispatch]\n}\n\nlet lastId = 0\n// istanbul ignore next\nconst genId = () => ++lastId\n\n/**\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\n * Taken from @reach/auto-id\n * @see https://github.com/reach/reach-ui/blob/6e9dbcf716d5c9a3420e062e5bac1ac4671d01cb/packages/auto-id/src/index.js\n */\n// istanbul ignore next\nfunction useId() {\n  const [id, setId] = useState(null)\n\n  useEffect(() => setId(genId()), [])\n\n  return id\n}\n\n/**\n * Checks if nextElement receives focus after the blur event.\n *\n * @param {FocusEvent} event The blur event.\n * @param {Element} nextElement The element to check that receive focus next.\n * @returns {boolean} If the focus lands on nextElement.\n */\nfunction focusLandsOnElement(event, nextElement) {\n  return (\n    !!nextElement &&\n    (event.relatedTarget === nextElement ||\n      // https://github.com/downshift-js/downshift/issues/832 - workaround for Firefox.\n      (event.nativeEvent &&\n        (nextElement === event.nativeEvent.explicitOriginalTarget ||\n          nextElement.contains(event.nativeEvent.explicitOriginalTarget))))\n  )\n}\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes\n}\n\n/**\n * Returns a message to be added to aria-live region when dropdown is open.\n *\n * @param {*} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yStatusMessage(selectionParameters) {\n  const {isOpen, items} = selectionParameters\n\n  if (!items) {\n    return ''\n  }\n\n  const resultCount = items.length\n  if (isOpen) {\n    if (resultCount === 0) {\n      return 'No results are available'\n    }\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n\n  return ''\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {selectedItem, itemToString: itemToStringLocal} = selectionParameters\n\n  return `${itemToStringLocal(selectedItem)} has been selected.`\n}\n\nconst defaultProps = {\n  itemToString,\n  stateReducer,\n  getA11yStatusMessage,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  circularNavigation: false,\n  environment:\n    typeof window === 'undefined' /* istanbul ignore next (ssr) */\n      ? {}\n      : window,\n}\n\nfunction getDefaultValue(props, propKey, defaultStateValuesLocal) {\n  const defaultPropKey = `default${capitalizeString(propKey)}`\n  if (defaultPropKey in props) {\n    return props[defaultPropKey]\n  }\n  return {...defaultStateValues, ...defaultStateValuesLocal}[propKey]\n}\n\nfunction getInitialValue(props, propKey, defaultStateValuesLocal) {\n  if (propKey in props) {\n    return props[propKey]\n  }\n  const initialPropKey = `initial${capitalizeString(propKey)}`\n  if (initialPropKey in props) {\n    return props[initialPropKey]\n  }\n  return getDefaultValue(props, propKey, defaultStateValuesLocal)\n}\n\nfunction getHighlightedIndexOnOpen(props, state, offset, getItemNodeFromIndex) {\n  const {items, initialHighlightedIndex, defaultHighlightedIndex} = props\n  const {selectedItem, highlightedIndex} = state\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (\n    initialHighlightedIndex !== undefined &&\n    highlightedIndex === initialHighlightedIndex\n  ) {\n    return initialHighlightedIndex\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex\n  }\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem)\n    }\n    return getNextWrappingIndex(\n      offset,\n      items.indexOf(selectedItem),\n      items.length,\n      getItemNodeFromIndex,\n      false,\n    )\n  }\n  if (offset === 0) {\n    return -1\n  }\n  return offset < 0 ? items.length - 1 : 0\n}\n\nexport {\n  getElementIds,\n  getState,\n  getItemIndex,\n  getPropTypesValidator,\n  isAcceptedCharacterKey,\n  useEnhancedReducer,\n  capitalizeString,\n  useId,\n  focusLandsOnElement,\n  defaultProps,\n  getDefaultValue,\n  getInitialValue,\n  getHighlightedIndexOnOpen,\n  defaultStateValues,\n}\n","import PropTypes from 'prop-types'\nimport {\n  getInitialValue as getInitialValueCommon,\n  getDefaultValue as getDefaultValueCommon,\n  defaultProps as defaultPropsCommon,\n} from '../utils'\n\nconst defaultStateValues = {\n  keysSoFar: '',\n}\n\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValueCommon(props, propKey, defaultStateValues)\n}\n\nfunction getInitialValue(props, propKey) {\n  return getInitialValueCommon(props, propKey, defaultStateValues)\n}\n\nfunction getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const isOpen = getInitialValue(props, 'isOpen')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    keysSoFar: '',\n  }\n}\n\nfunction getItemIndexByCharacterKey(\n  keysSoFar,\n  highlightedIndex,\n  items,\n  itemToStringParam,\n  getItemNodeFromIndex,\n) {\n  const lowerCasedItemStrings = items.map(item =>\n    itemToStringParam(item).toLowerCase(),\n  )\n  const lowerCasedKeysSoFar = keysSoFar.toLowerCase()\n  const isValid = (itemString, index) => {\n    const element = getItemNodeFromIndex(index)\n\n    return (\n      itemString.startsWith(lowerCasedKeysSoFar) &&\n      !(element && element.hasAttribute('disabled'))\n    )\n  }\n\n  for (\n    let index = highlightedIndex + 1;\n    index < lowerCasedItemStrings.length;\n    index++\n  ) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  for (let index = 0; index < highlightedIndex; index++) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  return highlightedIndex\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nexport {\n  getInitialState,\n  defaultStateValues,\n  propTypes,\n  getDefaultValue,\n  getItemIndexByCharacterKey,\n  defaultPropsCommon as defaultProps,\n}\n","import productionEnum from '../../productionEnum.macro'\n\nexport const MenuKeyDownArrowDown = productionEnum(\n  '__menu_keydown_arrow_down__',\n)\nexport const MenuKeyDownArrowUp = productionEnum('__menu_keydown_arrow_up__')\nexport const MenuKeyDownEscape = productionEnum('__menu_keydown_escape__')\nexport const MenuKeyDownHome = productionEnum('__menu_keydown_home__')\nexport const MenuKeyDownEnd = productionEnum('__menu_keydown_end__')\nexport const MenuKeyDownEnter = productionEnum('__menu_keydown_enter__')\nexport const MenuKeyDownSpaceButton = productionEnum(\n  '__menu_keydown_space_button__',\n)\nexport const MenuKeyDownCharacter = productionEnum('__menu_keydown_character__')\nexport const MenuBlur = productionEnum('__menu_blur__')\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\nexport const ToggleButtonKeyDownCharacter = productionEnum(\n  '__togglebutton_keydown_character__',\n)\nexport const ToggleButtonKeyDownArrowDown = productionEnum(\n  '__togglebutton_keydown_arrow_down__',\n)\nexport const ToggleButtonKeyDownArrowUp = productionEnum(\n  '__togglebutton_keydown_arrow_up__',\n)\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionClearKeysSoFar = productionEnum(\n  '__function_clear_keys_so_far__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\n","import {getHighlightedIndexOnOpen} from '../utils'\nimport {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport {getDefaultValue, getItemIndexByCharacterKey} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftSelectReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n      }\n      break\n    case stateChangeTypes.MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? 5 : 1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? -5 : -1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.MenuKeyDownEnter:\n    case stateChangeTypes.MenuKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n      break\n    case stateChangeTypes.MenuKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const keysSoFar = `${state.keysSoFar}${lowercasedKey}`\n        const highlightedIndex = getItemIndexByCharacterKey(\n          keysSoFar,\n          state.highlightedIndex,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n        changes = {\n          keysSoFar,\n          ...(highlightedIndex >= 0 && {\n            highlightedIndex,\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const keysSoFar = `${state.keysSoFar}${lowercasedKey}`\n        const itemIndex = getItemIndexByCharacterKey(\n          keysSoFar,\n          state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n        changes = {\n          keysSoFar,\n          ...(itemIndex >= 0 && {\n            selectedItem: props.items[itemIndex],\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowDown: {\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          1,\n          action.getItemNodeFromIndex,\n        ),\n      }\n      break\n    }\n    case stateChangeTypes.ToggleButtonKeyDownArrowUp:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          -1,\n          action.getItemNodeFromIndex,\n        ),\n      }\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n      break\n    case stateChangeTypes.FunctionClearKeysSoFar:\n      changes = {\n        keysSoFar: '',\n      }\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect} from 'react'\nimport {\n  getElementIds,\n  getItemIndex,\n  getPropTypesValidator,\n  isAcceptedCharacterKey,\n  useEnhancedReducer,\n  useId,\n  focusLandsOnElement,\n} from '../utils'\nimport setStatus from '../../set-a11y-status'\nimport {\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  normalizeArrowKey,\n} from '../../utils'\nimport downshiftSelectReducer from './reducer'\nimport {getInitialState, propTypes, defaultProps} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useSelect, propTypes)\n\nuseSelect.stateChangeTypes = stateChangeTypes\n\nfunction useSelect(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    items,\n    itemToString,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    initialIsOpen,\n    defaultIsOpen,\n    scrollIntoView,\n    environment,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n\n  // Reducer init.\n  const [\n    {isOpen, highlightedIndex, selectedItem, keysSoFar},\n    dispatchWithoutProps,\n  ] = useEnhancedReducer(downshiftSelectReducer, initialState, props)\n  const dispatch = action => dispatchWithoutProps({props, ...action})\n\n  // IDs generation.\n  const {labelId, getItemId, menuId, toggleButtonId} = getElementIds(\n    useId,\n    props,\n  )\n\n  /* Refs */\n  const toggleButtonRef = useRef(null)\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  itemRefs.current = []\n  const isInitialMount = useRef(true)\n  const shouldScroll = useRef(true)\n  const clearTimeout = useRef(null)\n\n  /* Effects */\n  /* Sets a11y status message on changes in isOpen. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n    setStatus(\n      getA11yStatusMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n    setStatus(\n      getA11ySelectionMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  /* Sets cleanup for the keysSoFar after 500ms. */\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    if (isInitialMount.current) {\n      clearTimeout.current = debounce(outerDispatch => {\n        outerDispatch({\n          type: stateChangeTypes.FunctionClearKeysSoFar,\n        })\n      }, 500)\n    }\n    if (!keysSoFar) {\n      return\n    }\n    clearTimeout.current(dispatch)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [keysSoFar])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMount.current) {\n      // Unless it was initialised as open.\n      if (initialIsOpen || defaultIsOpen || isOpen) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus menu on open.\n    // istanbul ignore next\n    if (isOpen) {\n      menuRef.current.focus()\n      // Focus toggleButton on close.\n    } else if (environment.document.activeElement === menuRef.current) {\n      toggleButtonRef.current.focus()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Scroll on highlighted item if change comes from keyboard. */\n  useEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !itemRefs.current.length) {\n      return\n    }\n    if (shouldScroll.current === false) {\n      shouldScroll.current = true\n    } else {\n      scrollIntoView(itemRefs.current[highlightedIndex], menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  /* Make initial ref false. */\n  useEffect(() => {\n    isInitialMount.current = false\n  }, [])\n\n  const getItemNodeFromIndex = index => itemRefs.current[index]\n\n  /* Event handler functions */\n  const menuKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowDown,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownArrowUp,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    Home(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownHome,\n        getItemNodeFromIndex,\n      })\n    },\n    End(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnd,\n        getItemNodeFromIndex,\n      })\n    },\n    Escape() {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEscape,\n      })\n    },\n    Enter(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownEnter,\n      })\n    },\n    ' '(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownSpaceButton,\n      })\n    },\n    Tab(event) {\n      // The exception that calls MenuBlur.\n      // istanbul ignore next\n      if (event.shiftKey) {\n        dispatch({\n          type: stateChangeTypes.MenuBlur,\n        })\n      }\n    },\n  }\n  const toggleButtonKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowDown,\n        getItemNodeFromIndex,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownArrowUp,\n        getItemNodeFromIndex,\n      })\n    },\n  }\n\n  // Event handlers.\n  const menuHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && menuKeyDownHandlers[key]) {\n      menuKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.MenuKeyDownCharacter,\n        key,\n        getItemNodeFromIndex,\n      })\n    }\n  }\n  // Focus going back to the toggleButton is something we control (Escape, Enter, Click).\n  // We are toggleing special actions for these cases in reducer, not MenuBlur.\n  // Since Shift-Tab also lands focus on toggleButton, we will handle it as exception and call MenuBlur.\n  const menuHandleBlur = event => {\n    if (!focusLandsOnElement(event, toggleButtonRef.current)) {\n      dispatch({\n        type: stateChangeTypes.MenuBlur,\n      })\n    }\n  }\n  const menuHandleMouseLeave = () => {\n    dispatch({\n      type: stateChangeTypes.MenuMouseLeave,\n    })\n  }\n  const toggleButtonHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.ToggleButtonClick,\n    })\n  }\n  const toggleButtonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && toggleButtonKeyDownHandlers[key]) {\n      toggleButtonKeyDownHandlers[key](event)\n    } else if (isAcceptedCharacterKey(key)) {\n      dispatch({\n        type: stateChangeTypes.ToggleButtonKeyDownCharacter,\n        key,\n        getItemNodeFromIndex,\n      })\n    }\n  }\n  const itemHandleMouseMove = index => {\n    if (index === highlightedIndex) {\n      return\n    }\n    shouldScroll.current = false\n    dispatch({\n      type: stateChangeTypes.ItemMouseMove,\n      index,\n    })\n  }\n  const itemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.ItemClick,\n      index,\n    })\n  }\n\n  // returns\n  const toggleMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }\n  const closeMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }\n  const openMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }\n  const setHighlightedIndex = newHighlightedIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex,\n    })\n  }\n  const selectItem = newSelectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionSelectItem,\n      selectedItem: newSelectedItem,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n  const getLabelProps = labelProps => ({\n    id: labelId,\n    htmlFor: toggleButtonId,\n    ...labelProps,\n  })\n  const getMenuProps = ({\n    onKeyDown,\n    onBlur,\n    onMouseLeave,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => ({\n    [refKey]: handleRefs(ref, menuNode => {\n      menuRef.current = menuNode\n    }),\n    id: menuId,\n    role: 'listbox',\n    'aria-labelledby': labelId,\n    tabIndex: -1,\n    ...(highlightedIndex > -1 && {\n      'aria-activedescendant': getItemId(highlightedIndex),\n    }),\n    onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n    onBlur: callAllEventHandlers(onBlur, menuHandleBlur),\n    onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n    ...rest,\n  })\n  const getToggleButtonProps = ({\n    onClick,\n    onKeyDown,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    const toggleProps = {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode\n      }),\n      id: toggleButtonId,\n      'aria-haspopup': 'listbox',\n      'aria-expanded': isOpen,\n      'aria-labelledby': `${labelId} ${toggleButtonId}`,\n      ...rest,\n    }\n\n    if (!rest.disabled) {\n      toggleProps.onClick = callAllEventHandlers(\n        onClick,\n        toggleButtonHandleClick,\n      )\n      toggleProps.onKeyDown = callAllEventHandlers(\n        onKeyDown,\n        toggleButtonHandleKeyDown,\n      )\n    }\n\n    return toggleProps\n  }\n  const getItemProps = ({\n    item,\n    index,\n    refKey = 'ref',\n    ref,\n    onMouseMove,\n    onClick,\n    ...rest\n  } = {}) => {\n    const itemIndex = getItemIndex(index, item, items)\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!')\n    }\n    const itemProps = {\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current.push(itemNode)\n        }\n      }),\n      role: 'option',\n      'aria-selected': `${itemIndex === highlightedIndex}`,\n      id: getItemId(itemIndex),\n      ...rest,\n    }\n\n    if (!rest.disabled) {\n      itemProps.onMouseMove = callAllEventHandlers(onMouseMove, () =>\n        itemHandleMouseMove(itemIndex),\n      )\n      itemProps.onClick = callAllEventHandlers(onClick, () =>\n        itemHandleClick(itemIndex),\n      )\n    }\n\n    return itemProps\n  }\n\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n  }\n}\n\nexport default useSelect\n","import PropTypes from 'prop-types'\nimport {\n  getElementIds as getElementIdsCommon,\n  getInitialValue as getInitialValueCommon,\n  getDefaultValue as getDefaultValueCommon,\n  defaultProps as defaultPropsCommon,\n} from '../utils'\n\nconst defaultStateValues = {\n  inputValue: '',\n}\n\nfunction getElementIds(generateDefaultId, {id, inputId, ...rest} = {}) {\n  const uniqueId = id === undefined ? `downshift-${generateDefaultId()}` : id\n\n  return {\n    inputId: inputId || `${uniqueId}-input`,\n    ...getElementIdsCommon(generateDefaultId, {id, ...rest}),\n  }\n}\n\nfunction getDefaultValue(props, propKey) {\n  return getDefaultValueCommon(props, propKey, defaultStateValues)\n}\n\nfunction getInitialValue(props, propKey) {\n  return getInitialValueCommon(props, propKey, defaultStateValues)\n}\n\nfunction getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const isOpen = getInitialValue(props, 'isOpen')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n  let inputValue = getInitialValue(props, 'inputValue')\n\n  if (\n    inputValue === '' &&\n    selectedItem &&\n    props.defaultInputValue === undefined &&\n    props.initialInputValue === undefined &&\n    props.inputValue === undefined\n  ) {\n    inputValue = props.itemToString(selectedItem)\n  }\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nconst defaultProps = {\n  ...defaultPropsCommon,\n  circularNavigation: true,\n}\n\nexport {\n  getElementIds,\n  getInitialState,\n  defaultStateValues,\n  propTypes,\n  getDefaultValue,\n  defaultProps,\n}\n","import productionEnum from '../../productionEnum.macro'\n\nexport const InputKeyDownArrowDown = productionEnum(\n  '__input_keydown_arrow_down__',\n)\nexport const InputKeyDownArrowUp = productionEnum('__input_keydown_arrow_up__')\nexport const InputKeyDownEscape = productionEnum('__input_keydown_escape__')\nexport const InputKeyDownHome = productionEnum('__input_keydown_home__')\nexport const InputKeyDownEnd = productionEnum('__input_keydown_end__')\nexport const InputKeyDownEnter = productionEnum('__input_keydown_enter__')\nexport const InputChange = productionEnum('__input_change__')\nexport const InputBlur = productionEnum('__input_blur__')\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionSetInputValue = productionEnum(\n  '__function_set_input_value__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\n","import {getHighlightedIndexOnOpen} from '../utils'\nimport {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport {getDefaultValue} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftUseComboboxReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? 5 : 1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowUp:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? -5 : -1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            -1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnter:\n      changes = {\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          isOpen: getDefaultValue(props, 'isOpen'),\n          highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n        }),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        selectedItem: null,\n        highlightedIndex: -1,\n        inputValue: '',\n      }\n      break\n    case stateChangeTypes.InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputBlur:\n      changes = {\n        isOpen: false,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n          highlightedIndex: -1,\n        }),\n      }\n      break\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n      break\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect} from 'react'\nimport {isPreact, isReactNative} from '../../is.macro'\nimport setStatus from '../../set-a11y-status'\nimport {\n  handleRefs,\n  normalizeArrowKey,\n  callAllEventHandlers,\n  targetWithinDownshift,\n} from '../../utils'\nimport {\n  getItemIndex,\n  useId,\n  getPropTypesValidator,\n  useEnhancedReducer,\n  focusLandsOnElement,\n} from '../utils'\nimport {getElementIds, getInitialState, propTypes, defaultProps} from './utils'\nimport downshiftUseComboboxReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useCombobox, propTypes)\n\nuseCombobox.stateChangeTypes = stateChangeTypes\n\nfunction useCombobox(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n    itemToString,\n    environment,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n\n  // Reducer init.\n  const [\n    {isOpen, highlightedIndex, selectedItem, inputValue},\n    dispatchWithoutProps,\n  ] = useEnhancedReducer(downshiftUseComboboxReducer, initialState, props)\n  const dispatch = action => dispatchWithoutProps({props, ...action})\n\n  // IDs generation.\n  const {labelId, getItemId, menuId, toggleButtonId, inputId} = getElementIds(\n    useId,\n    props,\n  )\n\n  /* Refs */\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  const inputRef = useRef(null)\n  const toggleButtonRef = useRef(null)\n  const comboboxRef = useRef(null)\n  itemRefs.current = []\n  const shouldScroll = useRef(true)\n  const isInitialMount = useRef(true)\n  const mouseAndTouchTrackers = useRef({\n    isMouseDown: false,\n    isTouchMove: false,\n  })\n\n  /* Effects */\n  /* Sets a11y status message on changes in isOpen. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    setStatus(\n      getA11yStatusMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n        inputValue,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMount.current) {\n      return\n    }\n\n    setStatus(\n      getA11ySelectionMessage({\n        isOpen,\n        items,\n        selectedItem,\n        itemToString,\n        inputValue,\n      }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  /* Scroll on highlighted item if change comes from keyboard. */\n  useEffect(() => {\n    if (highlightedIndex < 0 || !isOpen || !itemRefs.current.length) {\n      return\n    }\n\n    if (shouldScroll.current === false) {\n      shouldScroll.current = true\n    } else {\n      scrollIntoView(itemRefs.current[highlightedIndex], menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMount.current) {\n      // Unless it was initialised as open.\n      if (initialIsOpen || defaultIsOpen || isOpen) {\n        inputRef.current.focus()\n      }\n      return\n    }\n\n    // Focus menu on open.\n    // istanbul ignore next\n    if (isOpen) {\n      inputRef.current.focus()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  /* Make initial ref false. */\n  useEffect(() => {\n    isInitialMount.current = false\n  }, [])\n  /* Add mouse/touch events to document. */\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackers.current.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      mouseAndTouchTrackers.current.isMouseDown = false\n      if (\n        isOpen &&\n        !targetWithinDownshift(\n          event.target,\n          comboboxRef.current,\n          menuRef.current,\n          environment.document,\n        )\n      ) {\n        dispatch({\n          type: stateChangeTypes.InputBlur,\n        })\n      }\n    }\n    const onTouchStart = () => {\n      mouseAndTouchTrackers.current.isTouchMove = false\n    }\n    const onTouchMove = () => {\n      mouseAndTouchTrackers.current.isTouchMove = true\n    }\n    const onTouchEnd = event => {\n      if (\n        isOpen &&\n        !mouseAndTouchTrackers.current.isTouchMove &&\n        !targetWithinDownshift(\n          event.target,\n          comboboxRef.current,\n          menuRef.current,\n          environment.document,\n          false,\n        )\n      ) {\n        dispatch({\n          type: stateChangeTypes.InputBlur,\n        })\n      }\n    }\n\n    environment.addEventListener('mousedown', onMouseDown)\n    environment.addEventListener('mouseup', onMouseUp)\n    environment.addEventListener('touchstart', onTouchStart)\n    environment.addEventListener('touchmove', onTouchMove)\n    environment.addEventListener('touchend', onTouchEnd)\n\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown)\n      environment.removeEventListener('mouseup', onMouseUp)\n      environment.removeEventListener('touchstart', onTouchStart)\n      environment.removeEventListener('touchmove', onTouchMove)\n      environment.removeEventListener('touchend', onTouchEnd)\n    }\n  })\n\n  const getItemNodeFromIndex = index => itemRefs.current[index]\n\n  /* Event handler functions */\n  const inputKeyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownArrowDown,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    ArrowUp(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownArrowUp,\n        shiftKey: event.shiftKey,\n        getItemNodeFromIndex,\n      })\n    },\n    Home(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownHome,\n        getItemNodeFromIndex,\n      })\n    },\n    End(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownEnd,\n        getItemNodeFromIndex,\n      })\n    },\n    Escape() {\n      dispatch({\n        type: stateChangeTypes.InputKeyDownEscape,\n      })\n    },\n    Enter(event) {\n      event.preventDefault()\n      dispatch({\n        type: stateChangeTypes.InputKeyDownEnter,\n        getItemNodeFromIndex,\n      })\n    },\n  }\n\n  // Event handlers.\n  const inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && inputKeyDownHandlers[key]) {\n      inputKeyDownHandlers[key](event)\n    }\n  }\n  const inputHandleChange = event => {\n    dispatch({\n      type: stateChangeTypes.InputChange,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n    })\n  }\n  const inputHandleBlur = event => {\n    const shouldBlur = !(\n      mouseAndTouchTrackers.current.isMouseDown ||\n      focusLandsOnElement(event, toggleButtonRef.current)\n    )\n    /* istanbul ignore else */\n    if (shouldBlur) {\n      dispatch({\n        type: stateChangeTypes.InputBlur,\n      })\n    }\n  }\n  const menuHandleMouseLeave = () => {\n    dispatch({\n      type: stateChangeTypes.MenuMouseLeave,\n    })\n  }\n  const itemHandleMouseMove = index => {\n    if (index === highlightedIndex) {\n      return\n    }\n    shouldScroll.current = false\n    dispatch({\n      type: stateChangeTypes.ItemMouseMove,\n      index,\n    })\n  }\n  const itemHandleClick = index => {\n    dispatch({\n      type: stateChangeTypes.ItemClick,\n      index,\n    })\n  }\n  const toggleButtonHandleClick = () => {\n    dispatch({\n      type: stateChangeTypes.ToggleButtonClick,\n    })\n  }\n\n  // returns\n  const getLabelProps = labelProps => ({\n    id: labelId,\n    htmlFor: inputId,\n    ...labelProps,\n  })\n  const getMenuProps = ({onMouseLeave, refKey = 'ref', ref, ...rest} = {}) => ({\n    [refKey]: handleRefs(ref, menuNode => {\n      menuRef.current = menuNode\n    }),\n    id: menuId,\n    role: 'listbox',\n    'aria-labelledby': labelId,\n    onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n    ...rest,\n  })\n  const getItemProps = ({\n    item,\n    index,\n    refKey = 'ref',\n    ref,\n    onMouseMove,\n    onClick,\n    onPress,\n    ...rest\n  } = {}) => {\n    const itemIndex = getItemIndex(index, item, items)\n    if (itemIndex < 0) {\n      throw new Error('Pass either item or item index in getItemProps!')\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    return {\n      [refKey]: handleRefs(ref, itemNode => {\n        if (itemNode) {\n          itemRefs.current.push(itemNode)\n        }\n      }),\n      role: 'option',\n      'aria-selected': `${itemIndex === highlightedIndex}`,\n      id: getItemId(itemIndex),\n      ...(!rest.disabled && {\n        onMouseMove: callAllEventHandlers(onMouseMove, () => {\n          itemHandleMouseMove(itemIndex)\n        }),\n        [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n          itemHandleClick(itemIndex)\n        }),\n      }),\n      ...rest,\n    }\n  }\n  const getToggleButtonProps = ({\n    onClick,\n    onPress,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    return {\n      [refKey]: handleRefs(ref, toggleButtonNode => {\n        toggleButtonRef.current = toggleButtonNode\n      }),\n      id: toggleButtonId,\n      tabIndex: -1,\n      ...(!rest.disabled && {\n        ...(isReactNative\n          ? /* istanbul ignore next (react-native) */ {\n              onPress: callAllEventHandlers(onPress, toggleButtonHandleClick),\n            }\n          : {onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)}),\n      }),\n      ...rest,\n    }\n  }\n  const getInputProps = ({\n    onKeyDown,\n    onChange,\n    onInput,\n    onBlur,\n    onChangeText,\n    refKey = 'ref',\n    ref,\n    ...rest\n  } = {}) => {\n    /* istanbul ignore next (preact) */\n    const onChangeKey = isPreact ? 'onInput' : 'onChange'\n    let eventHandlers = {}\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers.onChange = callAllEventHandlers(\n        onChange,\n        onInput,\n        inputHandleChange,\n      )\n      eventHandlers.onChangeText = callAllEventHandlers(\n        onChangeText,\n        onInput,\n        text => {\n          inputHandleChange({nativeEvent: {text}})\n        },\n      )\n    }\n\n    return {\n      [refKey]: handleRefs(ref, inputNode => {\n        inputRef.current = inputNode\n      }),\n      id: inputId,\n      'aria-autocomplete': 'list',\n      'aria-controls': menuId,\n      ...(highlightedIndex > -1 && {\n        'aria-activedescendant': getItemId(highlightedIndex),\n      }),\n      'aria-labelledby': labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  const getComboboxProps = ({refKey = 'ref', ref, ...rest} = {}) => ({\n    [refKey]: handleRefs(ref, comboboxNode => {\n      comboboxRef.current = comboboxNode\n    }),\n    role: 'combobox',\n    'aria-haspopup': 'listbox',\n    'aria-owns': menuId,\n    'aria-expanded': isOpen,\n    ...rest,\n  })\n\n  // returns\n  const toggleMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }\n  const closeMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }\n  const openMenu = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }\n  const setHighlightedIndex = newHighlightedIndex => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetHighlightedIndex,\n      highlightedIndex: newHighlightedIndex,\n    })\n  }\n  const selectItem = newSelectedItem => {\n    dispatch({\n      type: stateChangeTypes.FunctionSelectItem,\n      selectedItem: newSelectedItem,\n    })\n  }\n  const setInputValue = newInputValue => {\n    dispatch({\n      type: stateChangeTypes.FunctionSetInputValue,\n      inputValue: newInputValue,\n    })\n  }\n  const reset = () => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }\n\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useCombobox\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","defineProperty","exports","value","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","a","u","$$typeof","type","y","module","require$$0","isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","style","getComputedStyle","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","options","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","document","documentElement","frames","cursor","parentNode","push","body","viewportWidth","window","visualViewport","width","innerWidth","viewportHeight","height","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","frame","_frame$getBoundingCli","_height","_width","_top","_left","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","idCounter","cbToCb","cb","noop","scrollIntoView","menuNode","computeScrollIntoView","forEach","isOrContainsNode","parent","child","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","args","setTimeout","callAllEventHandlers","fns","event","some","preventDownshiftDefault","nativeEvent","handleRefs","refs","ref","current","getA11yStatusMessage","isOpen","selectedItem","resultCount","previousResultCount","itemToString","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","getState","props","reduce","prevState","isControlledProp","undefined","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","targetWithinDownshift","rootNode","checkActiveElement","contextNode","activeElement","cleanupStatus","getStatusDiv","textContent","setStatus","status","documentProp","div","statusDiv","getElementById","createElement","setAttribute","border","clip","margin","padding","position","appendChild","unknown","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","keyDownHome","keyDownEnd","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","Downshift","subClass","superClass","_Component","id","_this","String","menuId","labelId","inputId","getItemId","input","items","timeoutIds","internalSetTimeout","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","inputValue","defaultIsOpen","selectItem","item","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","nextFullState","stateChangeTypes","onStateChange","onSelect","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","_this2","getItemCount","nextHighlightedIndex","ArrowUp","_this3","Enter","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","newHighlightedIndex","_this4","End","_this5","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","highlightedItem","setA11yStatus","initialHighlightedIndex","initialIsOpen","initialInputValue","initialSelectedItem","create","constructor","__proto__","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","_this6","componentDidMount","_this7","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","element","nodeName","isDOMElement","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","defaultStateValues","getElementIds","generateDefaultId","toggleButtonId","uniqueId","getItemIndex","isAcceptedCharacterKey","test","capitalizeString","string","slice","toUpperCase","callOnChangeProps","changes","stateKey","propKey","handler","invokeOnChangeHandler","useEnhancedReducer","reducer","initialState","enhancedReducer","useCallback","action","newState","stateReduceLocal","useReducer","dispatch","lastId","genId","useId","useState","setId","useEffect","focusLandsOnElement","nextElement","relatedTarget","explicitOriginalTarget","s","selectionParameters","getA11ySelectionMessage","itemToStringLocal","circularNavigation","getDefaultValue","defaultStateValuesLocal","defaultPropKey","getInitialValue","initialPropKey","getHighlightedIndexOnOpen","offset","keysSoFar","getDefaultValueCommon","getInitialValueCommon","getItemIndexByCharacterKey","itemToStringParam","lowerCasedItemStrings","map","toLowerCase","lowerCasedKeysSoFar","isValid","itemString","startsWith","PropTypes","array","isRequired","func","bool","number","any","shape","MenuKeyDownArrowDown","MenuKeyDownArrowUp","MenuKeyDownEscape","MenuKeyDownHome","MenuKeyDownEnd","MenuKeyDownEnter","MenuKeyDownSpaceButton","MenuKeyDownCharacter","MenuBlur","MenuMouseLeave","ItemMouseMove","ItemClick","ToggleButtonKeyDownCharacter","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSelectItem","FunctionClearKeysSoFar","FunctionReset","downshiftSelectReducer","lowercasedKey","Error","useSelect","userProps","getInitialState","dispatchWithoutProps","toggleButtonRef","useRef","itemRefs","isInitialMount","outerDispatch","menuKeyDownHandlers","Tab","toggleButtonKeyDownHandlers","menuHandleKeyDown","menuHandleBlur","menuHandleMouseLeave","toggleButtonHandleClick","toggleButtonHandleKeyDown","toggleProps","toggleButtonNode","labelProps","onMouseLeave","tabIndex","itemProps","itemHandleMouseMove","itemHandleClick","newSelectedItem","defaultPropsCommon","InputKeyDownArrowDown","InputKeyDownArrowUp","InputKeyDownEscape","InputKeyDownHome","InputKeyDownEnd","InputKeyDownEnter","InputChange","InputBlur","FunctionSetInputValue","downshiftUseComboboxReducer","useCombobox","defaultInputValue","getElementIdsCommon","inputRef","comboboxRef","mouseAndTouchTrackers","inputNode","getComboboxProps","comboboxNode","setInputValue","newInputValue"],"mappings":"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"}