import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
import { useInstanceId } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import Button from '../button';
import RangeControl from '../range-control';
import CustomSelectControl from '../custom-select-control';
var DEFAULT_FONT_SIZE = 'default';
var CUSTOM_FONT_SIZE = 'custom';

function getSelectValueFromFontSize(fontSizes, value) {
  if (value) {
    var fontSizeValue = fontSizes.find(function (font) {
      return font.size === Number(value);
    });
    return fontSizeValue ? fontSizeValue.slug : CUSTOM_FONT_SIZE;
  }

  return DEFAULT_FONT_SIZE;
}

function getSelectOptions(optionsArray, disableCustomFontSizes) {
  optionsArray = [{
    slug: DEFAULT_FONT_SIZE,
    name: __('Default')
  }].concat(_toConsumableArray(optionsArray), _toConsumableArray(disableCustomFontSizes ? [] : [{
    slug: CUSTOM_FONT_SIZE,
    name: __('Custom')
  }]));
  return optionsArray.map(function (option) {
    return {
      key: option.slug,
      name: option.name,
      style: {
        fontSize: option.size
      }
    };
  });
}

export default function FontSizePicker(_ref) {
  var fallbackFontSize = _ref.fallbackFontSize,
      _ref$fontSizes = _ref.fontSizes,
      fontSizes = _ref$fontSizes === void 0 ? [] : _ref$fontSizes,
      _ref$disableCustomFon = _ref.disableCustomFontSizes,
      disableCustomFontSizes = _ref$disableCustomFon === void 0 ? false : _ref$disableCustomFon,
      onChange = _ref.onChange,
      value = _ref.value,
      _ref$withSlider = _ref.withSlider,
      withSlider = _ref$withSlider === void 0 ? false : _ref$withSlider;
  var instanceId = useInstanceId(FontSizePicker);

  var _useState = useState(getSelectValueFromFontSize(fontSizes, value)),
      _useState2 = _slicedToArray(_useState, 2),
      currentSelectValue = _useState2[0],
      setCurrentSelectValue = _useState2[1];

  if (disableCustomFontSizes && !fontSizes.length) {
    return null;
  }

  var setFontSize = function setFontSize(fontSizeKey, fontSizeValue) {
    setCurrentSelectValue(fontSizeKey);

    if (fontSizeKey === DEFAULT_FONT_SIZE) {
      onChange(undefined);
      return;
    }

    if (!fontSizeValue) {
      return;
    }

    onChange(Number(fontSizeValue));
  };

  var onChangeValue = function onChangeValue(event) {
    var newValue = event.target.value;
    var key = getSelectValueFromFontSize(fontSizes, newValue);
    setFontSize(key, newValue);
  };

  var onSelectChangeValue = function onSelectChangeValue(_ref2) {
    var selectedItem = _ref2.selectedItem;
    var selectedKey = selectedItem.key;
    var selectedValue = selectedItem.style && selectedItem.style.fontSize;
    setFontSize(selectedKey, selectedValue);
  };

  var onSliderChangeValue = function onSliderChangeValue(sliderValue) {
    var sliderKey = getSelectValueFromFontSize(fontSizes, sliderValue);
    setFontSize(sliderKey, sliderValue);
  };

  var reset = function reset() {
    setFontSize(DEFAULT_FONT_SIZE);
  };

  var options = getSelectOptions(fontSizes, disableCustomFontSizes);
  var rangeControlNumberId = "components-range-control__number#".concat(instanceId);
  return createElement("fieldset", {
    className: "components-font-size-picker"
  }, createElement("legend", {
    className: "screen-reader-text"
  }, __('Font size')), createElement("div", {
    className: "components-font-size-picker__controls"
  }, fontSizes.length > 0 && createElement(CustomSelectControl, {
    className: 'components-font-size-picker__select',
    label: __('Preset size'),
    options: options,
    value: options.find(function (option) {
      return option.key === currentSelectValue;
    }) || options[0],
    onChange: onSelectChangeValue
  }), !withSlider && !disableCustomFontSizes && createElement("div", {
    className: "components-range-control__number-container"
  }, createElement("label", {
    htmlFor: rangeControlNumberId
  }, __('Custom')), createElement("input", {
    id: rangeControlNumberId,
    className: "components-range-control__number",
    type: "number",
    onChange: onChangeValue,
    "aria-label": __('Custom'),
    value: value || ''
  })), createElement(Button, {
    className: "components-color-palette__clear",
    disabled: value === undefined,
    onClick: reset,
    isSmall: true,
    isSecondary: true
  }, __('Reset'))), withSlider && createElement(RangeControl, {
    className: "components-font-size-picker__custom-input",
    label: __('Custom Size'),
    value: value || '',
    initialPosition: fallbackFontSize,
    onChange: onSliderChangeValue,
    min: 12,
    max: 100,
    beforeIcon: "editor-textcolor",
    afterIcon: "editor-textcolor"
  }));
}
//# sourceMappingURL=index.js.map