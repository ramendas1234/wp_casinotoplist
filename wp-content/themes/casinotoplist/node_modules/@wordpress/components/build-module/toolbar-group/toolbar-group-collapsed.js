import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement } from "@wordpress/element";

/**
 * WordPress dependencies
 */
import { useContext } from '@wordpress/element';
/**
 * Internal dependencies
 */

import DropdownMenu from '../dropdown-menu';
import ToolbarContext from '../toolbar-context';
import ToolbarItem from '../toolbar-item';

function ToolbarGroupCollapsed(_ref) {
  var _ref$controls = _ref.controls,
      controls = _ref$controls === void 0 ? [] : _ref$controls,
      props = _objectWithoutProperties(_ref, ["controls"]);

  // It'll contain state if `ToolbarGroup` is being used within
  // `<Toolbar __experimentalAccessibilityLabel="label" />`
  var accessibleToolbarState = useContext(ToolbarContext);

  var renderDropdownMenu = function renderDropdownMenu(toggleProps) {
    return createElement(DropdownMenu, _extends({
      hasArrowIndicator: true,
      controls: controls,
      toggleProps: toggleProps
    }, props));
  };

  if (accessibleToolbarState) {
    return createElement(ToolbarItem, null, renderDropdownMenu);
  }

  return renderDropdownMenu();
}

export default ToolbarGroupCollapsed;
//# sourceMappingURL=toolbar-group-collapsed.js.map