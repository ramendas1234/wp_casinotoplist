import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { createElement } from "@wordpress/element";

/**
 * External dependencies
 */
import classnames from 'classnames';
/**
 * WordPress dependencies
 */

import { useState, Children } from '@wordpress/element';
import { __ } from '@wordpress/i18n';
/**
 * Internal dependencies
 */

import Modal from '../modal';
import KeyboardShortcuts from '../keyboard-shortcuts';
import Button from '../button';
import PageControl from './page-control';
import { BackButtonIcon, ForwardButtonIcon } from './icons';
import FinishButton from './finish-button';
export default function Guide(_ref) {
  var children = _ref.children,
      className = _ref.className,
      contentLabel = _ref.contentLabel,
      finishButtonText = _ref.finishButtonText,
      onFinish = _ref.onFinish;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      currentPage = _useState2[0],
      setCurrentPage = _useState2[1];

  var numberOfPages = Children.count(children);
  var canGoBack = currentPage > 0;
  var canGoForward = currentPage < numberOfPages - 1;

  var goBack = function goBack() {
    if (canGoBack) {
      setCurrentPage(currentPage - 1);
    }
  };

  var goForward = function goForward() {
    if (canGoForward) {
      setCurrentPage(currentPage + 1);
    }
  };

  if (numberOfPages === 0) {
    return null;
  }

  return createElement(Modal, {
    className: classnames('components-guide', className),
    contentLabel: contentLabel,
    onRequestClose: onFinish
  }, createElement(KeyboardShortcuts, {
    key: currentPage,
    shortcuts: {
      left: goBack,
      right: goForward
    }
  }), createElement("div", {
    className: "components-guide__container"
  }, children[currentPage], !canGoForward && createElement(FinishButton, {
    className: "components-guide__inline-finish-button",
    onClick: onFinish
  }, finishButtonText || __('Finish')), createElement("div", {
    className: "components-guide__footer"
  }, canGoBack && createElement(Button, {
    className: "components-guide__back-button",
    icon: createElement(BackButtonIcon, null),
    onClick: goBack
  }, __('Previous')), createElement(PageControl, {
    currentPage: currentPage,
    numberOfPages: numberOfPages,
    setCurrentPage: setCurrentPage
  }), canGoForward && createElement(Button, {
    className: "components-guide__forward-button",
    icon: createElement(ForwardButtonIcon, null),
    onClick: goForward
  }, __('Next')), !canGoForward && createElement(FinishButton, {
    className: "components-guide__finish-button",
    onClick: onFinish
  }, finishButtonText || __('Finish')))));
}
//# sourceMappingURL=index.js.map