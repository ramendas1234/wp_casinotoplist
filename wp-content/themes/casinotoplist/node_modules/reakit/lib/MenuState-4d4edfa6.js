'use strict';

var React = require('react');
var _rollupPluginBabelHelpers = require('./_rollupPluginBabelHelpers-baac11a7.js');
var useSealedState = require('reakit-utils/useSealedState');
var removeItemFromArray = require('reakit-utils/removeItemFromArray');
var PopoverState = require('./Popover/PopoverState.js');
var MenuBarState = require('./Menu/MenuBarState.js');

var MenuContext = React.createContext(null);
function useMenuContext(menuRef, role, options) {
  var orphan = "unstable_orphan" in options && options.unstable_orphan;
  var parent = React.useContext(MenuContext);

  var _React$useState = React.useState([]),
      children = _React$useState[0],
      setChildren = _React$useState[1];

  var _ref = parent || {},
      addChildToParent = _ref.addChild,
      removeChildFromParent = _ref.removeChild;

  var addChild = React.useCallback(function (ref) {
    return setChildren(function (refs) {
      return [].concat(refs, [ref]);
    });
  }, []);
  var removeChild = React.useCallback(function (ref) {
    return setChildren(function (refs) {
      return removeItemFromArray.removeItemFromArray(refs, ref);
    });
  }, []); // If it's a nested menu, add it to parent

  React.useEffect(function () {
    if (!addChildToParent || orphan) return undefined;
    addChildToParent(menuRef);
    return function () {
      if (removeChildFromParent) {
        removeChildFromParent(menuRef);
      }
    };
  }, [menuRef, addChildToParent, removeChildFromParent, orphan]);
  var providerValue = React.useMemo(function () {
    return {
      orientation: options.orientation,
      next: options.next,
      previous: options.previous,
      ref: menuRef,
      role: role,
      parent: parent,
      children: children,
      addChild: addChild,
      removeChild: removeChild
    };
  }, [options.orientation, options.next, options.previous, menuRef, role, parent, children, addChild, removeChild]);
  var wrapElement = React.useCallback(function (c) {
    return React.createElement(MenuContext.Provider, {
      value: providerValue
    }, c);
  }, [providerValue]);
  return wrapElement;
}

function useMenuState(initialState) {
  if (initialState === void 0) {
    initialState = {};
  }

  var _useSealedState = useSealedState.useSealedState(initialState),
      _useSealedState$orien = _useSealedState.orientation,
      orientation = _useSealedState$orien === void 0 ? "vertical" : _useSealedState$orien,
      _useSealedState$gutte = _useSealedState.gutter,
      gutter = _useSealedState$gutte === void 0 ? 0 : _useSealedState$gutte,
      sealed = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_useSealedState, ["orientation", "gutter"]);

  var parent = React.useContext(MenuContext);
  var placement = sealed.placement || (parent && parent.orientation === "vertical" ? "right-start" : "bottom-start");
  var menuBar = MenuBarState.useMenuBarState(_rollupPluginBabelHelpers._objectSpread2({}, sealed, {
    orientation: orientation
  }));
  var popover = PopoverState.usePopoverState(_rollupPluginBabelHelpers._objectSpread2({}, sealed, {
    placement: placement,
    gutter: gutter
  }));
  React.useEffect(function () {
    if (!popover.visible) {
      menuBar.unstable_reset();
    }
  }, [popover.visible]);
  return _rollupPluginBabelHelpers._objectSpread2({}, menuBar, {}, popover);
}
var keys = [].concat(MenuBarState.useMenuBarState.__keys, PopoverState.usePopoverState.__keys);
useMenuState.__keys = keys;

exports.MenuContext = MenuContext;
exports.useMenuContext = useMenuContext;
exports.useMenuState = useMenuState;
