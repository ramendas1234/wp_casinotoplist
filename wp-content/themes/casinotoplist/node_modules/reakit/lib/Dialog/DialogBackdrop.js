'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('reakit-utils/warning');
var React = require('react');
require('../Id/IdProvider.js');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-baac11a7.js');
require('reakit-utils/useAllCallbacks');
require('reakit-utils/useSealedState');
var usePipe = require('reakit-utils/usePipe');
require('reakit-utils/cx');
require('../Id/IdState.js');
require('../Id/IdGroup.js');
require('reakit-utils/useIsomorphicEffect');
require('../Disclosure/DisclosureState.js');
var DisclosureRegion = require('../Disclosure/DisclosureRegion.js');
require('react-dom');
var Portal = require('../Portal/Portal.js');
var DialogState = require('./DialogState.js');
var DialogBackdropContext = require('../DialogBackdropContext-faf4ce85.js');

var useDialogBackdrop = createHook.createHook({
  name: "DialogBackdrop",
  compose: DisclosureRegion.useDisclosureRegion,
  useState: DialogState.useDialogState,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? true : _ref$modal,
        options = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref, ["modal"]);

    return _rollupPluginBabelHelpers._objectSpread2({
      modal: modal
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement,
        htmlProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, ["wrapElement"]);

    var wrapElement = React.useCallback(function (element) {
      if (options.modal) {
        return React.createElement(Portal.Portal, null, React.createElement(DialogBackdropContext.DialogBackdropContext.Provider, {
          value: true
        }, element));
      }

      return element;
    }, [options.modal]);
    return _rollupPluginBabelHelpers._objectSpread2({
      id: undefined,
      role: undefined,
      wrapElement: usePipe.usePipe(wrapElement, htmlWrapElement),
      "data-dialog-ref": options.baseId
    }, htmlProps);
  }
});
var DialogBackdrop = createComponent.createComponent({
  as: "div",
  useHook: useDialogBackdrop
});

exports.DialogBackdrop = DialogBackdrop;
exports.useDialogBackdrop = useDialogBackdrop;
