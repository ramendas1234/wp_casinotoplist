'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-baac11a7.js');
var useForkRef = require('reakit-utils/useForkRef');
var isButton = require('reakit-utils/isButton');
require('reakit-utils/tabbable');
require('reakit-utils/hasFocusWithin');
var Tabbable = require('../Tabbable/Tabbable.js');

var useButton = createHook.createHook({
  name: "Button",
  compose: Tabbable.useTabbable,
  useProps: function useProps(_, _ref) {
    var htmlRef = _ref.ref,
        htmlProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref, ["ref"]);

    var ref = React.useRef(null);

    var _React$useState = React.useState(undefined),
        role = _React$useState[0],
        setRole = _React$useState[1];

    var _React$useState2 = React.useState("button"),
        type = _React$useState2[0],
        setType = _React$useState2[1];

    React.useEffect(function () {
      var self = ref.current;
      if (!self) return;

      if (!isButton.isButton(self)) {
        if (self.tagName !== "A") {
          setRole("button");
        }

        setType(undefined);
      }
    }, []);
    return _rollupPluginBabelHelpers._objectSpread2({
      ref: useForkRef.useForkRef(ref, htmlRef),
      role: role,
      type: type
    }, htmlProps);
  }
});
var Button = createComponent.createComponent({
  as: "button",
  useHook: useButton
});

exports.Button = Button;
exports.useButton = useButton;
