'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('../Id/IdProvider.js');
var createComponent = require('reakit-system/createComponent');
var createHook = require('reakit-system/createHook');
require('../Box/Box.js');
var _rollupPluginBabelHelpers = require('../_rollupPluginBabelHelpers-baac11a7.js');
require('reakit-utils/useSealedState');
var usePipe = require('reakit-utils/usePipe');
require('../Id/IdState.js');
require('reakit-utils/useUpdateEffect');
require('reakit-utils/useLiveRef');
require('reakit-utils/isPromise');
require('reakit-utils/isEmpty');
require('reakit-utils/isPlainObject');
var FormState = require('./FormState.js');
require('reakit-utils/isObject');
require('./utils/setAllIn.js');
require('./utils/getIn.js');
require('reakit-utils/toArray');
require('reakit-utils/isInteger');
require('./utils/setIn.js');
var getInputId = require('../getInputId-cbd3bbcc.js');
require('../getLabelId-eba7e47b.js');
require('../shouldShowError-8cab5d01.js');
require('../Group/Group.js');
var FormGroup = require('./FormGroup.js');
var RoverState = require('../Rover/RoverState.js');

var FormRadioGroupContext = React.createContext(null);
var unstable_useFormRadioGroup = createHook.createHook({
  name: "FormRadioGroup",
  compose: FormGroup.unstable_useFormGroup,
  useState: FormState.unstable_useFormState,
  keys: ["name"],
  useOptions: function useOptions(options, _ref) {
    var name = _ref.name;
    return _rollupPluginBabelHelpers._objectSpread2({
      name: name
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement,
        htmlProps = _rollupPluginBabelHelpers._objectWithoutPropertiesLoose(_ref2, ["wrapElement"]);

    var id = getInputId.getInputId(options.name, options.baseId);
    var rover = RoverState.useRoverState({
      baseId: id,
      loop: true
    });
    var providerValue = React.useMemo(function () {
      return rover;
    }, [rover.stops, rover.currentId, rover.unstable_pastId]);
    var wrapElement = React.useCallback(function (element) {
      return React.createElement(FormRadioGroupContext.Provider, {
        value: providerValue
      }, element);
    }, [providerValue]);
    return _rollupPluginBabelHelpers._objectSpread2({
      role: "radiogroup",
      wrapElement: usePipe.usePipe(wrapElement, htmlWrapElement)
    }, htmlProps);
  }
});
var unstable_FormRadioGroup = createComponent.createComponent({
  as: "fieldset",
  useHook: unstable_useFormRadioGroup
});

exports.FormRadioGroupContext = FormRadioGroupContext;
exports.unstable_FormRadioGroup = unstable_FormRadioGroup;
exports.unstable_useFormRadioGroup = unstable_useFormRadioGroup;
