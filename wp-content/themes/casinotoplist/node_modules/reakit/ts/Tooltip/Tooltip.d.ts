import * as React from "react";
import { DisclosureRegionOptions, DisclosureRegionHTMLProps } from "../Disclosure/DisclosureRegion";
import { TooltipStateReturn } from "./TooltipState";
export declare type TooltipOptions = DisclosureRegionOptions & Pick<Partial<TooltipStateReturn>, "unstable_popoverRef" | "unstable_popoverStyles"> & {
    /**
     * Whether or not the dialog should be rendered within `Portal`.
     * It's `true` by default if `modal` is `true`.
     */
    unstable_portal?: boolean;
};
export declare type TooltipHTMLProps = DisclosureRegionHTMLProps;
export declare type TooltipProps = TooltipOptions & TooltipHTMLProps;
export declare const useTooltip: {
    (options?: TooltipOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: TooltipOptions, htmlProps: import("..").BoxHTMLProps) => TooltipOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & Pick<Partial<TooltipStateReturn>, "unstable_popoverRef" | "unstable_popoverStyles"> & {
        /**
         * Whether or not the dialog should be rendered within `Portal`.
         * It's `true` by default if `modal` is `true`.
         */
        unstable_portal?: boolean | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & Pick<Partial<TooltipStateReturn>, "unstable_popoverRef" | "unstable_popoverStyles"> & {
        /**
         * Whether or not the dialog should be rendered within `Portal`.
         * It's `true` by default if `modal` is `true`.
         */
        unstable_portal?: boolean | undefined;
    } & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }) => boolean) | undefined;
};
export declare const Tooltip: import("reakit-system/src/createComponent").Component<"div", TooltipOptions>;
