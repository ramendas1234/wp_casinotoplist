import * as React from "react";
import { DisclosureRegionOptions, DisclosureRegionHTMLProps } from "../Disclosure/DisclosureRegion";
import { DialogStateReturn } from "./DialogState";
export declare type DialogBackdropOptions = DisclosureRegionOptions & Pick<Partial<DialogStateReturn>, "modal">;
export declare type DialogBackdropHTMLProps = DisclosureRegionHTMLProps;
export declare type DialogBackdropProps = DialogBackdropOptions & DialogBackdropHTMLProps;
export declare const useDialogBackdrop: {
    (options?: DialogBackdropOptions | undefined, htmlProps?: import("..").BoxHTMLProps | undefined): import("..").BoxHTMLProps;
    __keys: readonly any[];
    __useOptions: (options: DialogBackdropOptions, htmlProps: import("..").BoxHTMLProps) => DialogBackdropOptions;
    __propsAreEqual?: ((prev: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & Pick<Partial<DialogStateReturn>, "modal"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }, next: import("..").BoxOptions & Pick<Partial<import("..").unstable_IdStateReturn>, "baseId" | "unstable_idCountRef" | "unstable_setBaseId"> & {
        id?: string | undefined;
    } & Pick<Partial<import("..").DisclosureStateReturn>, "visible" | "unstable_animated" | "unstable_animating" | "unstable_stopAnimation" | "unstable_setIsMounted"> & Pick<Partial<DialogStateReturn>, "modal"> & React.HTMLAttributes<any> & React.RefAttributes<any> & {
        wrapElement?: ((element: React.ReactNode) => React.ReactNode) | undefined;
    }) => boolean) | undefined;
};
export declare const DialogBackdrop: import("reakit-system/src/createComponent").Component<"div", DialogBackdropOptions>;
