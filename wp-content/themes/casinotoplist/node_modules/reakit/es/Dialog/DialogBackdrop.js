import 'reakit-utils/warning';
import { useCallback, createElement } from 'react';
import '../Id/IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-f089acec.js';
import 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import { usePipe } from 'reakit-utils/usePipe';
import 'reakit-utils/cx';
import '../Id/IdState.js';
import '../Id/IdGroup.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Disclosure/DisclosureState.js';
import { useDisclosureRegion } from '../Disclosure/DisclosureRegion.js';
import 'react-dom';
import { Portal } from '../Portal/Portal.js';
import { useDialogState } from './DialogState.js';
import { D as DialogBackdropContext } from '../DialogBackdropContext-dd59a293.js';

var useDialogBackdrop = createHook({
  name: "DialogBackdrop",
  compose: useDisclosureRegion,
  useState: useDialogState,
  useOptions: function useOptions(_ref) {
    var _ref$modal = _ref.modal,
        modal = _ref$modal === void 0 ? true : _ref$modal,
        options = _objectWithoutPropertiesLoose(_ref, ["modal"]);

    return _objectSpread2({
      modal: modal
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement,
        htmlProps = _objectWithoutPropertiesLoose(_ref2, ["wrapElement"]);

    var wrapElement = useCallback(function (element) {
      if (options.modal) {
        return createElement(Portal, null, createElement(DialogBackdropContext.Provider, {
          value: true
        }, element));
      }

      return element;
    }, [options.modal]);
    return _objectSpread2({
      id: undefined,
      role: undefined,
      wrapElement: usePipe(wrapElement, htmlWrapElement),
      "data-dialog-ref": options.baseId
    }, htmlProps);
  }
});
var DialogBackdrop = createComponent({
  as: "div",
  useHook: useDialogBackdrop
});

export { DialogBackdrop, useDialogBackdrop };
