import { warning } from 'reakit-utils/warning';
import 'react';
import '../Id/IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import '../_rollupPluginBabelHelpers-f089acec.js';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import '../Tabbable/Tabbable.js';
import '../Button/Button.js';
import 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import 'reakit-utils/cx';
import '../Id/IdState.js';
import '../Id/IdGroup.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Disclosure/DisclosureState.js';
import '../Disclosure/DisclosureRegion.js';
import { useDisclosure } from '../Disclosure/Disclosure.js';
import { useHiddenState } from './HiddenState.js';

var useHiddenDisclosure = createHook({
  name: "HiddenDisclosure",
  compose: useDisclosure,
  useState: useHiddenState,
  useProps: function useProps(_, htmlProps) {
    process.env.NODE_ENV !== "production" ? warning(true, "[reakit/HiddenDisclosure]", "`HiddenDisclosure` has been renamed to `Disclosure`. Using `<HiddenDisclosure />` will no longer work in future versions.", "See https://reakit.io/docs/disclosure") : void 0;
    return htmlProps;
  }
});
var HiddenDisclosure = createComponent({
  as: "button",
  useHook: useHiddenDisclosure
});

export { HiddenDisclosure, useHiddenDisclosure };
