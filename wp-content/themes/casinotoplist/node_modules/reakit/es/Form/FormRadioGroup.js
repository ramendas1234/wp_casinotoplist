import { createContext, useMemo, useCallback, createElement } from 'react';
import '../Id/IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { a as _objectSpread2, _ as _objectWithoutPropertiesLoose } from '../_rollupPluginBabelHelpers-f089acec.js';
import 'reakit-utils/useSealedState';
import { usePipe } from 'reakit-utils/usePipe';
import '../Id/IdState.js';
import 'reakit-utils/useUpdateEffect';
import 'reakit-utils/useLiveRef';
import 'reakit-utils/isPromise';
import 'reakit-utils/isEmpty';
import 'reakit-utils/isPlainObject';
import { unstable_useFormState } from './FormState.js';
import 'reakit-utils/isObject';
import './utils/setAllIn.js';
import './utils/getIn.js';
import 'reakit-utils/toArray';
import 'reakit-utils/isInteger';
import './utils/setIn.js';
import { g as getInputId } from '../getInputId-aa144169.js';
import '../getLabelId-3db05e97.js';
import '../shouldShowError-9263056a.js';
import '../Group/Group.js';
import { unstable_useFormGroup } from './FormGroup.js';
import { useRoverState } from '../Rover/RoverState.js';

var FormRadioGroupContext = createContext(null);
var unstable_useFormRadioGroup = createHook({
  name: "FormRadioGroup",
  compose: unstable_useFormGroup,
  useState: unstable_useFormState,
  keys: ["name"],
  useOptions: function useOptions(options, _ref) {
    var name = _ref.name;
    return _objectSpread2({
      name: name
    }, options);
  },
  useProps: function useProps(options, _ref2) {
    var htmlWrapElement = _ref2.wrapElement,
        htmlProps = _objectWithoutPropertiesLoose(_ref2, ["wrapElement"]);

    var id = getInputId(options.name, options.baseId);
    var rover = useRoverState({
      baseId: id,
      loop: true
    });
    var providerValue = useMemo(function () {
      return rover;
    }, [rover.stops, rover.currentId, rover.unstable_pastId]);
    var wrapElement = useCallback(function (element) {
      return createElement(FormRadioGroupContext.Provider, {
        value: providerValue
      }, element);
    }, [providerValue]);
    return _objectSpread2({
      role: "radiogroup",
      wrapElement: usePipe(wrapElement, htmlWrapElement)
    }, htmlProps);
  }
});
var unstable_FormRadioGroup = createComponent({
  as: "fieldset",
  useHook: unstable_useFormRadioGroup
});

export { FormRadioGroupContext, unstable_FormRadioGroup, unstable_useFormRadioGroup };
