import 'reakit-utils/warning';
import { useContext, useCallback } from 'react';
import '../Id/IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-f089acec.js';
import 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import '../Tabbable/Tabbable.js';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import '../Id/IdState.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Disclosure/DisclosureState.js';
import 'reakit-utils/removeItemFromArray';
import '../Dialog/DialogState.js';
import 'reakit-utils/createOnKeyDown';
import '../Id/Id.js';
import '../Rover/RoverState.js';
import { useRover } from '../Rover/Rover.js';
import '@popperjs/core';
import '../Popover/PopoverState.js';
import { u as useMenuState, M as MenuContext } from '../MenuState-449bf74e.js';
import './MenuBarState.js';

// TODO: Find a better implementation
function isTouchDevice() {
  if (process.env.NODE_ENV === "test" || typeof window === "undefined") return false;
  return "ontouchstart" in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
}

var useMenuItem = createHook({
  name: "MenuItem",
  compose: useRover,
  useState: useMenuState,
  useProps: function useProps(_, _ref) {
    var htmlOnMouseOver = _ref.onMouseOver,
        htmlOnMouseOut = _ref.onMouseOut,
        htmlProps = _objectWithoutPropertiesLoose(_ref, ["onMouseOver", "onMouseOut"]);

    var menu = useContext(MenuContext);
    var menuRole = menu && menu.role;
    var menuRef = menu && menu.ref;
    var onMouseOver = useCallback(function (event) {
      if (!event.currentTarget) return;
      if (isTouchDevice()) return;
      if (menuRole === "menubar") return;
      var self = event.currentTarget;
      self.focus();
    }, [menuRole]);
    var onMouseOut = useCallback(function (event) {
      if (!event.currentTarget || !menuRef) return;
      var self = event.currentTarget; // Blur items on mouse out
      // Ignore disclosure, otherwise sub menu will close when blurring

      if (!self.hasAttribute("aria-controls") || self.getAttribute("aria-expanded") !== "true") {
        self.blur();
      } // Move focus onto menu after blurring


      if (document.activeElement === document.body && menuRef.current && !isTouchDevice()) {
        menuRef.current.focus();
      }
    }, [menuRef]);
    return _objectSpread2({
      role: "menuitem",
      onMouseOver: useAllCallbacks(onMouseOver, htmlOnMouseOver),
      onMouseOut: useAllCallbacks(onMouseOut, htmlOnMouseOut)
    }, htmlProps);
  }
});
var MenuItem = createComponent({
  as: "button",
  useHook: useMenuItem
});

export { MenuItem, useMenuItem };
