import 'reakit-utils/warning';
import { useContext, useRef, useState, useMemo, useCallback, useEffect } from 'react';
import '../Id/IdProvider.js';
import { createComponent } from 'reakit-system/createComponent';
import { createHook } from 'reakit-system/createHook';
import '../Box/Box.js';
import { _ as _objectWithoutPropertiesLoose, a as _objectSpread2 } from '../_rollupPluginBabelHelpers-f089acec.js';
import { useForkRef } from 'reakit-utils/useForkRef';
import 'reakit-utils/isButton';
import 'reakit-utils/tabbable';
import 'reakit-utils/hasFocusWithin';
import '../Tabbable/Tabbable.js';
import '../Button/Button.js';
import { useAllCallbacks } from 'reakit-utils/useAllCallbacks';
import 'reakit-utils/useSealedState';
import '../Id/IdState.js';
import 'reakit-utils/useIsomorphicEffect';
import '../Disclosure/DisclosureState.js';
import 'reakit-utils/removeItemFromArray';
import '../Dialog/DialogState.js';
import '../Disclosure/Disclosure.js';
import '../Dialog/DialogDisclosure.js';
import { createOnKeyDown } from 'reakit-utils/createOnKeyDown';
import '../Id/Id.js';
import '../Rover/RoverState.js';
import '../Rover/Rover.js';
import '@popperjs/core';
import '../Popover/PopoverState.js';
import { u as useMenuState, M as MenuContext } from '../MenuState-449bf74e.js';
import './MenuBarState.js';
import { usePopoverDisclosure } from '../Popover/PopoverDisclosure.js';

var noop = function noop() {};

var useMenuButton = createHook({
  name: "MenuButton",
  compose: usePopoverDisclosure,
  useState: useMenuState,
  useProps: function useProps(options, _ref) {
    var htmlRef = _ref.ref,
        htmlOnClick = _ref.onClick,
        htmlOnKeyDown = _ref.onKeyDown,
        htmlOnFocus = _ref.onFocus,
        htmlOnMouseOver = _ref.onMouseOver,
        htmlProps = _objectWithoutPropertiesLoose(_ref, ["ref", "onClick", "onKeyDown", "onFocus", "onMouseOver"]);

    var parent = useContext(MenuContext);
    var ref = useRef(null); // This avoids race condition between focus and click.
    // On some browsers, focus is triggered right before click.
    // So we use it to disable toggling.

    var _React$useState = useState(false),
        hasShownOnFocus = _React$useState[0],
        setHasShownOnFocus = _React$useState[1];

    var _options$placement$sp = options.placement.split("-"),
        dir = _options$placement$sp[0];

    var hasParent = Boolean(parent);
    var parentIsMenuBar = parent && parent.role === "menubar";
    var onKeyDown = useMemo(function () {
      return createOnKeyDown({
        stopPropagation: function stopPropagation(event) {
          return event.key !== "Escape";
        },
        onKey: options.show,
        keyMap: function keyMap() {
          // prevents scroll jump
          var first = function first() {
            return setTimeout(options.first);
          };

          return {
            Escape: options.hide,
            Enter: hasParent && first,
            " ": hasParent && first,
            ArrowUp: dir === "top" || dir === "bottom" ? options.last : false,
            ArrowRight: dir === "right" && first,
            ArrowDown: dir === "bottom" || dir === "top" ? first : false,
            ArrowLeft: dir === "left" && first
          };
        }
      });
    }, [dir, hasParent, options.show, options.hide, options.first, options.last]);
    var onFocus = useCallback(function () {
      if (parentIsMenuBar) {
        setHasShownOnFocus(true);
        options.show();
      }
    }, [parentIsMenuBar, options.show]); // Restores hasShownOnFocus

    useEffect(function () {
      if (!hasShownOnFocus) return undefined;
      var id = setTimeout(function () {
        return setHasShownOnFocus(false);
      }, 200);
      return function () {
        return clearTimeout(id);
      };
    }, [hasShownOnFocus]);
    var onMouseOver = useCallback(function (event) {
      // MenuButton's don't do anything on mouse over when they aren't
      // cointained within a Menu/MenuBar
      if (!parent) return;
      var self = event.currentTarget;

      if (parentIsMenuBar) {
        // if MenuButton is an item inside a MenuBar, it'll only open
        // if there's already another sibling expanded MenuButton
        var subjacentOpenMenu = parent.ref.current && parent.ref.current.querySelector("[aria-expanded='true']");

        if (subjacentOpenMenu) {
          self.focus();
        }
      } else {
        // If it's in a Menu, open after a short delay
        // TODO: Make the delay a prop?
        setTimeout(function () {
          if (self.contains(document.activeElement)) {
            options.show();

            if (document.activeElement !== self) {
              self.focus();
            }
          }
        }, 200);
      }
    }, [parent, parentIsMenuBar, options.show]); // If disclosure is rendered as a menu bar item, it's toggable
    // That is, you can click on the expanded disclosure to close its menu
    // But, if disclosure has been focused, it may be result of a mouse down
    // In this case, toggling it would make it close right away on click
    // Then we check if it has been shown on focus. If so, we don't toggle

    var onClick = useCallback(function () {
      if (hasParent && (!parentIsMenuBar || hasShownOnFocus)) {
        options.show();
      } else {
        options.toggle();
      }
    }, [hasParent, parentIsMenuBar, hasShownOnFocus, options.show, options.toggle]);
    return _objectSpread2({
      ref: useForkRef(ref, htmlRef),
      "aria-haspopup": "menu",
      onClick: useAllCallbacks(onClick, htmlOnClick),
      onKeyDown: useAllCallbacks(onKeyDown, htmlOnKeyDown),
      onFocus: useAllCallbacks(onFocus, htmlOnFocus),
      onMouseOver: useAllCallbacks(onMouseOver, htmlOnMouseOver)
    }, htmlProps);
  },
  useComposeOptions: function useComposeOptions(options) {
    return _objectSpread2({}, options, {
      // Toggling is handled by MenuButton
      toggle: noop
    });
  }
});
var MenuButton = createComponent({
  as: "button",
  useHook: useMenuButton
});

export { MenuButton, useMenuButton };
